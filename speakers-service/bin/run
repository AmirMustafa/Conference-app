#!/usr/bin/env node

const http = require('http');
const axios = require('axios');
const config = require('../config')[process.env.NODE_ENV || 'development'];

const log = config.log();
const service = require('../server/service')(config);

const server = http.createServer(service);

server.listen(0); // Choose free port
// server.listen(process.env.PORT || 3001);

server.on('listening', () => {
  // Below requests are sent to service-registry microservice
  const registerService = () => axios.put(
    `http://localhost:3000/register/${config.name}/${config.version}/${server.address().port}`,
  );

  const unregisterService = () => axios.delete(
    `http://localhost:3000/register/${config.name}/${config.version}/${server.address().port}`,
  );

  // Registering speakers-service service to service-registry microservice
  registerService();
  const interval = setInterval(registerService, 20000); // Reregister after every timeout i.e. 30 seconds

  const cleanUp = async () => {
    clearInterval(interval);
    await unregisterService();
  };

  // Unregister a service when some error occured
  process.on('uncaughtException', async () => {
    await cleanUp();
    process.exit(1);
  });

  process.on('SIGTERM', async () => {
    await cleanUp();
    process.exit(1);
  });

  process.on('SIGINT', async () => {
    await cleanUp();
    process.exit(1);
  });

  // setTimeout(() => {
  //   throw new Error('Something went wrong!');
  // }, 10000);

  log.info(
    `Hi there! I'm listening on port ${server.address().port} in ${service.get(
      'env',
    )} mode.`,
  );
});
